/* Auto-generated by genmsg_cpp for file /opt/ros/hydro/stacks/qbo_arduqbo/srv/Test.srv */
#ifndef QBO_ARDUQBO_SERVICE_TEST_H
#define QBO_ARDUQBO_SERVICE_TEST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace qbo_arduqbo
{
template <class ContainerAllocator>
struct TestRequest_ {
  typedef TestRequest_<ContainerAllocator> Type;

  TestRequest_()
  {
  }

  TestRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::qbo_arduqbo::TestRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qbo_arduqbo::TestRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TestRequest
typedef  ::qbo_arduqbo::TestRequest_<std::allocator<void> > TestRequest;

typedef boost::shared_ptr< ::qbo_arduqbo::TestRequest> TestRequestPtr;
typedef boost::shared_ptr< ::qbo_arduqbo::TestRequest const> TestRequestConstPtr;



template <class ContainerAllocator>
struct TestResponse_ {
  typedef TestResponse_<ContainerAllocator> Type;

  TestResponse_()
  : SRFcount(0)
  , SRFAddress()
  , SRFNotFound()
  , Gyroscope(false)
  , Accelerometer(false)
  , LCD(false)
  , Qboard3(false)
  , Qboard1(false)
  , Qboard2(false)
  , rightMotor(false)
  , leftMotor(false)
  {
  }

  TestResponse_(const ContainerAllocator& _alloc)
  : SRFcount(0)
  , SRFAddress(_alloc)
  , SRFNotFound(_alloc)
  , Gyroscope(false)
  , Accelerometer(false)
  , LCD(false)
  , Qboard3(false)
  , Qboard1(false)
  , Qboard2(false)
  , rightMotor(false)
  , leftMotor(false)
  {
  }

  typedef int8_t _SRFcount_type;
  int8_t SRFcount;

  typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _SRFAddress_type;
  std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  SRFAddress;

  typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _SRFNotFound_type;
  std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  SRFNotFound;

  typedef uint8_t _Gyroscope_type;
  uint8_t Gyroscope;

  typedef uint8_t _Accelerometer_type;
  uint8_t Accelerometer;

  typedef uint8_t _LCD_type;
  uint8_t LCD;

  typedef uint8_t _Qboard3_type;
  uint8_t Qboard3;

  typedef uint8_t _Qboard1_type;
  uint8_t Qboard1;

  typedef uint8_t _Qboard2_type;
  uint8_t Qboard2;

  typedef uint8_t _rightMotor_type;
  uint8_t rightMotor;

  typedef uint8_t _leftMotor_type;
  uint8_t leftMotor;


  typedef boost::shared_ptr< ::qbo_arduqbo::TestResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qbo_arduqbo::TestResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TestResponse
typedef  ::qbo_arduqbo::TestResponse_<std::allocator<void> > TestResponse;

typedef boost::shared_ptr< ::qbo_arduqbo::TestResponse> TestResponsePtr;
typedef boost::shared_ptr< ::qbo_arduqbo::TestResponse const> TestResponseConstPtr;


struct Test
{

typedef TestRequest Request;
typedef TestResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Test
} // namespace qbo_arduqbo

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::qbo_arduqbo::TestRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::qbo_arduqbo::TestRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::qbo_arduqbo::TestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::qbo_arduqbo::TestRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::qbo_arduqbo::TestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "qbo_arduqbo/TestRequest";
  }

  static const char* value(const  ::qbo_arduqbo::TestRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::qbo_arduqbo::TestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::qbo_arduqbo::TestRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::qbo_arduqbo::TestRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::qbo_arduqbo::TestResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::qbo_arduqbo::TestResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::qbo_arduqbo::TestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f8d7da5192e662dd9f7974027b7e5ee";
  }

  static const char* value(const  ::qbo_arduqbo::TestResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6f8d7da5192e662dULL;
  static const uint64_t static_value2 = 0xd9f7974027b7e5eeULL;
};

template<class ContainerAllocator>
struct DataType< ::qbo_arduqbo::TestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "qbo_arduqbo/TestResponse";
  }

  static const char* value(const  ::qbo_arduqbo::TestResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::qbo_arduqbo::TestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 SRFcount\n\
int16[] SRFAddress\n\
int16[] SRFNotFound\n\
bool Gyroscope\n\
bool Accelerometer\n\
bool LCD\n\
bool Qboard3\n\
bool Qboard1\n\
bool Qboard2\n\
bool rightMotor\n\
bool leftMotor\n\
\n\
\n\
";
  }

  static const char* value(const  ::qbo_arduqbo::TestResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::qbo_arduqbo::TestRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TestRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::qbo_arduqbo::TestResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.SRFcount);
    stream.next(m.SRFAddress);
    stream.next(m.SRFNotFound);
    stream.next(m.Gyroscope);
    stream.next(m.Accelerometer);
    stream.next(m.LCD);
    stream.next(m.Qboard3);
    stream.next(m.Qboard1);
    stream.next(m.Qboard2);
    stream.next(m.rightMotor);
    stream.next(m.leftMotor);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TestResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<qbo_arduqbo::Test> {
  static const char* value() 
  {
    return "6f8d7da5192e662dd9f7974027b7e5ee";
  }

  static const char* value(const qbo_arduqbo::Test&) { return value(); } 
};

template<>
struct DataType<qbo_arduqbo::Test> {
  static const char* value() 
  {
    return "qbo_arduqbo/Test";
  }

  static const char* value(const qbo_arduqbo::Test&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<qbo_arduqbo::TestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f8d7da5192e662dd9f7974027b7e5ee";
  }

  static const char* value(const qbo_arduqbo::TestRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<qbo_arduqbo::TestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "qbo_arduqbo/Test";
  }

  static const char* value(const qbo_arduqbo::TestRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<qbo_arduqbo::TestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f8d7da5192e662dd9f7974027b7e5ee";
  }

  static const char* value(const qbo_arduqbo::TestResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<qbo_arduqbo::TestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "qbo_arduqbo/Test";
  }

  static const char* value(const qbo_arduqbo::TestResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // QBO_ARDUQBO_SERVICE_TEST_H

