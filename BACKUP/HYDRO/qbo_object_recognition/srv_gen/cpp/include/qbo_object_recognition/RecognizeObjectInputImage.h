/* Auto-generated by genmsg_cpp for file /opt/ros/hydro/stacks/qbo_object_recognition/srv/RecognizeObjectInputImage.srv */
#ifndef QBO_OBJECT_RECOGNITION_SERVICE_RECOGNIZEOBJECTINPUTIMAGE_H
#define QBO_OBJECT_RECOGNITION_SERVICE_RECOGNIZEOBJECTINPUTIMAGE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "sensor_msgs/Image.h"



namespace qbo_object_recognition
{
template <class ContainerAllocator>
struct RecognizeObjectInputImageRequest_ {
  typedef RecognizeObjectInputImageRequest_<ContainerAllocator> Type;

  RecognizeObjectInputImageRequest_()
  : input_image()
  {
  }

  RecognizeObjectInputImageRequest_(const ContainerAllocator& _alloc)
  : input_image(_alloc)
  {
  }

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _input_image_type;
   ::sensor_msgs::Image_<ContainerAllocator>  input_image;


  typedef boost::shared_ptr< ::qbo_object_recognition::RecognizeObjectInputImageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qbo_object_recognition::RecognizeObjectInputImageRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RecognizeObjectInputImageRequest
typedef  ::qbo_object_recognition::RecognizeObjectInputImageRequest_<std::allocator<void> > RecognizeObjectInputImageRequest;

typedef boost::shared_ptr< ::qbo_object_recognition::RecognizeObjectInputImageRequest> RecognizeObjectInputImageRequestPtr;
typedef boost::shared_ptr< ::qbo_object_recognition::RecognizeObjectInputImageRequest const> RecognizeObjectInputImageRequestConstPtr;



template <class ContainerAllocator>
struct RecognizeObjectInputImageResponse_ {
  typedef RecognizeObjectInputImageResponse_<ContainerAllocator> Type;

  RecognizeObjectInputImageResponse_()
  : object_name()
  , recognized(false)
  {
  }

  RecognizeObjectInputImageResponse_(const ContainerAllocator& _alloc)
  : object_name(_alloc)
  , recognized(false)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  object_name;

  typedef uint8_t _recognized_type;
  uint8_t recognized;


  typedef boost::shared_ptr< ::qbo_object_recognition::RecognizeObjectInputImageResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qbo_object_recognition::RecognizeObjectInputImageResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RecognizeObjectInputImageResponse
typedef  ::qbo_object_recognition::RecognizeObjectInputImageResponse_<std::allocator<void> > RecognizeObjectInputImageResponse;

typedef boost::shared_ptr< ::qbo_object_recognition::RecognizeObjectInputImageResponse> RecognizeObjectInputImageResponsePtr;
typedef boost::shared_ptr< ::qbo_object_recognition::RecognizeObjectInputImageResponse const> RecognizeObjectInputImageResponseConstPtr;


struct RecognizeObjectInputImage
{

typedef RecognizeObjectInputImageRequest Request;
typedef RecognizeObjectInputImageResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct RecognizeObjectInputImage
} // namespace qbo_object_recognition

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::qbo_object_recognition::RecognizeObjectInputImageRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::qbo_object_recognition::RecognizeObjectInputImageRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::qbo_object_recognition::RecognizeObjectInputImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a290e9e25e4086fd604347d20967f215";
  }

  static const char* value(const  ::qbo_object_recognition::RecognizeObjectInputImageRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa290e9e25e4086fdULL;
  static const uint64_t static_value2 = 0x604347d20967f215ULL;
};

template<class ContainerAllocator>
struct DataType< ::qbo_object_recognition::RecognizeObjectInputImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "qbo_object_recognition/RecognizeObjectInputImageRequest";
  }

  static const char* value(const  ::qbo_object_recognition::RecognizeObjectInputImageRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::qbo_object_recognition::RecognizeObjectInputImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
sensor_msgs/Image input_image\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::qbo_object_recognition::RecognizeObjectInputImageRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::qbo_object_recognition::RecognizeObjectInputImageResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::qbo_object_recognition::RecognizeObjectInputImageResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::qbo_object_recognition::RecognizeObjectInputImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "20fe0fa539e86f0dcf82db65a3df666b";
  }

  static const char* value(const  ::qbo_object_recognition::RecognizeObjectInputImageResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x20fe0fa539e86f0dULL;
  static const uint64_t static_value2 = 0xcf82db65a3df666bULL;
};

template<class ContainerAllocator>
struct DataType< ::qbo_object_recognition::RecognizeObjectInputImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "qbo_object_recognition/RecognizeObjectInputImageResponse";
  }

  static const char* value(const  ::qbo_object_recognition::RecognizeObjectInputImageResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::qbo_object_recognition::RecognizeObjectInputImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string object_name\n\
bool recognized\n\
\n\
\n\
";
  }

  static const char* value(const  ::qbo_object_recognition::RecognizeObjectInputImageResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::qbo_object_recognition::RecognizeObjectInputImageRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.input_image);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RecognizeObjectInputImageRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::qbo_object_recognition::RecognizeObjectInputImageResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.object_name);
    stream.next(m.recognized);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RecognizeObjectInputImageResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<qbo_object_recognition::RecognizeObjectInputImage> {
  static const char* value() 
  {
    return "71f47bcb0df643ea09ed237fc93b7e61";
  }

  static const char* value(const qbo_object_recognition::RecognizeObjectInputImage&) { return value(); } 
};

template<>
struct DataType<qbo_object_recognition::RecognizeObjectInputImage> {
  static const char* value() 
  {
    return "qbo_object_recognition/RecognizeObjectInputImage";
  }

  static const char* value(const qbo_object_recognition::RecognizeObjectInputImage&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<qbo_object_recognition::RecognizeObjectInputImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "71f47bcb0df643ea09ed237fc93b7e61";
  }

  static const char* value(const qbo_object_recognition::RecognizeObjectInputImageRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<qbo_object_recognition::RecognizeObjectInputImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "qbo_object_recognition/RecognizeObjectInputImage";
  }

  static const char* value(const qbo_object_recognition::RecognizeObjectInputImageRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<qbo_object_recognition::RecognizeObjectInputImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "71f47bcb0df643ea09ed237fc93b7e61";
  }

  static const char* value(const qbo_object_recognition::RecognizeObjectInputImageResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<qbo_object_recognition::RecognizeObjectInputImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "qbo_object_recognition/RecognizeObjectInputImage";
  }

  static const char* value(const qbo_object_recognition::RecognizeObjectInputImageResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // QBO_OBJECT_RECOGNITION_SERVICE_RECOGNIZEOBJECTINPUTIMAGE_H

